---
import type { CollectionEntry } from 'astro:content';

interface Props {
    title: string;
    description: string;
    url: string;
    tag: string;
    posts: CollectionEntry<'blog'>[];
    relatedTags?: Array<{tag: string; count: number}>;
}

const { title, description, url, tag, posts, relatedTags = [] } = Astro.props;

// Use a Record type to satisfy TypeScript
type SchemaObject = Record<string, any>;

// Create tag page schema
const tagSchema: SchemaObject = {
    "@context": "https://schema.org",
    "@type": "CollectionPage",
    "name": title,
    "description": description,
    "url": url,
    "isPartOf": {
        "@type": "WebSite",
        "name": "Anthony Trivisano",
        "url": new URL('/', Astro.site).href
    },
    "mainEntity": {
        "@type": "ItemList",
        "itemListElement": posts.map((post, index) => {
            // Get post image URL
            const imageUrl = new URL(post.data.image.src, Astro.site).href;

            // Format the ISO date
            const datePublished = new Date(post.data.date).toISOString();

            return {
                "@type": "ListItem",
                "position": index + 1,
                "item": {
                    "@type": "BlogPosting",
                    "headline": post.data.title,
                    "name": post.data.title,
                    "description": post.data.description,
                    "url": new URL(`/blog/${post.data.slug}`, Astro.site).href,
                    "datePublished": datePublished,
                    "author": {
                        "@type": "Person",
                        "name": post.data.author
                    },
                    "image": imageUrl,
                    "keywords": post.data.tags.join(", "),
                    "articleSection": post.data.categories.join(", ")
                }
            };
        })
    },
    "about": {
        "@type": "Thing",
        "name": `#${tag}`,
        "description": `Articles tagged with #${tag} by Anthony Trivisano`
    },
    "keywords": [tag, ...relatedTags.slice(0, 5).map(t => t.tag)]
};

// Create breadcrumb list for the tag
const breadcrumbSchema: SchemaObject = {
    "@type": "BreadcrumbList",
    "itemListElement": [
        {
            "@type": "ListItem",
            "position": 1,
            "name": "Home",
            "item": new URL('/', Astro.site).href
        },
        {
            "@type": "ListItem",
            "position": 2,
            "name": "Blog",
            "item": new URL('/blog', Astro.site).href
        },
        {
            "@type": "ListItem",
            "position": 3,
            "name": `#${tag}`,
            "item": url
        }
    ]
};

// Create full schema
const fullSchema: SchemaObject = {
    "@context": "https://schema.org",
    "@graph": [tagSchema, breadcrumbSchema]
};
---

<script type="application/ld+json" set:html={JSON.stringify(fullSchema)} />