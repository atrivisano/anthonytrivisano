---
interface Props {
    name?: string;
    description?: string;
    url?: string;
    email?: string;
    telephone?: string;
    location?: {
        name: string;
        addressLocality?: string;
        addressRegion?: string;
        addressCountry?: string;
    };
    availabilityNote?: string;
    sameAs?: string[];
}

const {
    name = "Anthony Trivisano",
    description = "Contact Anthony Trivisano for technology leadership consulting, database optimization services, and digital transformation expertise.",
    url = new URL('/contact', Astro.site).href,
    email = "anthony.trivisano@gmail.com",
    telephone = "",
    location = {
        name: "London, Ontario, Canada",
        addressLocality: "London",
        addressRegion: "Ontario",
        addressCountry: "Canada"
    },
    availabilityNote = "I'm always open to new opportunities and collaborations. Feel free to reach out!",
    sameAs = [
        "https://linkedin.com/in/anthonytrivisano",
    ]
} = Astro.props;

// Use a Record type to satisfy TypeScript
type SchemaObject = Record<string, any>;

// Create contact page schema
const contactPageSchema: SchemaObject = {
    "@context": "https://schema.org",
    "@type": "ContactPage",
    "name": `Contact ${name}`,
    "description": description,
    "url": url,
    "mainEntity": {
        "@type": "Person",
        "@id": "#person"
    }
};

// Create person schema
const personSchema: SchemaObject = {
    "@context": "https://schema.org",
    "@type": "Person",
    "@id": "#person",
    "name": name,
    "url": new URL('/', Astro.site).href,
    "sameAs": sameAs
};

// Add contact information to person schema
if (email) {
    personSchema.email = email;
}

if (telephone) {
    personSchema.telephone = telephone;
}

if (location) {
    personSchema.address = {
        "@type": "PostalAddress",
        "addressLocality": location.addressLocality,
        "addressRegion": location.addressRegion,
        "addressCountry": location.addressCountry
    };
}

// Create breadcrumb schema
const breadcrumbSchema: SchemaObject = {
    "@context": "https://schema.org",
    "@type": "BreadcrumbList",
    "itemListElement": [
        {
            "@type": "ListItem",
            "position": 1,
            "name": "Home",
            "item": new URL('/', Astro.site).href
        },
        {
            "@type": "ListItem",
            "position": 2,
            "name": "Contact",
            "item": url
        }
    ]
};

// Create full schema
const fullSchema = {
    "@context": "https://schema.org",
    "@graph": [contactPageSchema, personSchema, breadcrumbSchema]
};
---

<script type="application/ld+json" set:html={JSON.stringify(fullSchema)}/>