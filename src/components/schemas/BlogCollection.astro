---
import type { CollectionEntry } from 'astro:content';

interface Props {
    title: string;
    description: string;
    url: string;
    posts: CollectionEntry<'blog'>[];
    categories?: string[];
}

const { title, description, url, posts, categories = [] } = Astro.props;

// Use a Record type to satisfy TypeScript
type SchemaObject = Record<string, any>;

// Create blog list schema
const blogListSchema: SchemaObject = {
    "@context": "https://schema.org",
    "@type": "CollectionPage",
    "name": title,
    "description": description,
    "url": url,
    "isPartOf": {
        "@type": "WebSite",
        "name": "Anthony Trivisano",
        "url": new URL('/', Astro.site).href
    },
    "mainEntity": {
        "@type": "ItemList",
        "itemListElement": posts.map((post, index) => {
            // Get post image URL
            const imageUrl = new URL(post.data.image.src, Astro.site).href;

            // Format the ISO date
            const datePublished = new Date(post.data.date).toISOString();

            return {
                "@type": "ListItem",
                "position": index + 1,
                "item": {
                    "@type": "BlogPosting",
                    "headline": post.data.title,
                    "name": post.data.title,
                    "description": post.data.description,
                    "url": new URL(`/blog/${post.data.slug}`, Astro.site).href,
                    "datePublished": datePublished,
                    "author": {
                        "@type": "Person",
                        "name": post.data.author
                    },
                    "image": imageUrl,
                    "keywords": post.data.tags.join(", "),
                    "articleSection": post.data.categories.join(", ")
                }
            };
        })
    }
};

// Add blog categories as a separate schema object
if (categories.length > 0) {
    // No need to do anything here with categories for now
    // We'll use them in the full schema below
}

// Create graph for all schema objects
const schemaGraph: SchemaObject[] = [blogListSchema];

// Add categories as a separate BreadcrumbList if present
if (categories.length > 0) {
    const categoriesSchema: SchemaObject = {
        "@type": "BreadcrumbList",
        "itemListElement": [
            {
                "@type": "ListItem",
                "position": 1,
                "name": "Home",
                "item": new URL('/', Astro.site).href
            },
            {
                "@type": "ListItem",
                "position": 2,
                "name": "Blog",
                "item": url
            }
        ]
    };

    schemaGraph.push(categoriesSchema);
}

const fullSchema: SchemaObject = {
    "@context": "https://schema.org",
    "@graph": schemaGraph
};
---

<script type="application/ld+json" set:html={JSON.stringify(fullSchema)} />