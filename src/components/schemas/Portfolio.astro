---
import type { CollectionEntry } from 'astro:content';

interface Props {
    project: CollectionEntry<'portfolio'>;
    url: string;
}

const { project, url } = Astro.props;
const {
    title,
    description,
    summary,
    client,
    timeline,
    role,
    technologies,
    category,
    challengeIntroduction,
    challenges,
    solutionIntroduction,
    solution,
    metrics,
    featuredImage
} = project.data;

// Use a Record type to satisfy TypeScript
type SchemaObject = Record<string, any>;

// Get the full image URL if it exists
const imageUrl = featuredImage ? new URL(featuredImage, Astro.site).href : null;

// Parse timeline to extract dates (if possible)
let startDate = null;
let endDate = null;

try {
    // Attempt to extract dates from the timeline string (assuming format like "Jan 2022 - Mar 2023")
    const timelineMatch = timeline?.match(/([A-Za-z]+\s+\d{4})(?:\s*-\s*([A-Za-z]+\s+\d{4}|Present))?/);

    if (timelineMatch) {
        if (timelineMatch[1]) {
            startDate = new Date(timelineMatch[1]).toISOString().split('T')[0]; // YYYY-MM-DD format
        }

        if (timelineMatch[2] && timelineMatch[2] !== 'Present') {
            endDate = new Date(timelineMatch[2]).toISOString().split('T')[0]; // YYYY-MM-DD format
        }
    }
} catch (e) {
    // If parsing fails, leave dates as null
}

// Create CreativeWork schema for the portfolio project
const creativeWorkSchema: SchemaObject = {
    "@context": "https://schema.org",
    "@type": "CreativeWork",
    "@id": `${url}#project`,
    "name": title,
    "headline": title,
    "description": description,
    "abstract": summary,
    "url": url,
    ...(imageUrl && { "image": imageUrl }),
    "creator": {
        "@type": "Person",
        "name": "Anthony Trivisano",
        "url": new URL('/', Astro.site).href
    },
    ...(startDate && { "dateCreated": startDate }),
    ...(endDate && { "datePublished": endDate }),
    ...(technologies && technologies.length > 0 && { "keywords": technologies.join(", ") }),
    ...(category && { "genre": category }),
    "workExample": role || "Technology Project"
};

// Add client as sourceOrganization if available
if (client) {
    creativeWorkSchema.sourceOrganization = {
        "@type": "Organization",
        "name": client
    };
}

// Add metrics as results if available
if (metrics && metrics.length > 0) {
    creativeWorkSchema.result = metrics.map(metric => ({
        "@type": "Thing",
        "name": metric.label,
        "value": metric.value
    }));
}

// Create webpage schema for the portfolio item page
const webPageSchema: SchemaObject = {
    "@context": "https://schema.org",
    "@type": "WebPage",
    "@id": url,
    "url": url,
    "name": title,
    "description": description,
    "isPartOf": {
        "@type": "WebSite",
        "name": "Anthony Trivisano",
        "url": new URL('/', Astro.site).href
    },
    "about": {
        "@id": `${url}#project`
    },
    "mainEntity": {
        "@id": `${url}#project`
    }
};

// Create breadcrumb schema
const breadcrumbSchema: SchemaObject = {
    "@context": "https://schema.org",
    "@type": "BreadcrumbList",
    "itemListElement": [
        {
            "@type": "ListItem",
            "position": 1,
            "name": "Home",
            "item": new URL('/', Astro.site).href
        },
        {
            "@type": "ListItem",
            "position": 2,
            "name": "Portfolio",
            "item": new URL('/portfolio', Astro.site).href
        },
        {
            "@type": "ListItem",
            "position": 3,
            "name": title,
            "item": url
        }
    ]
};

// Create full schema
const fullSchema = {
    "@context": "https://schema.org",
    "@graph": [creativeWorkSchema, webPageSchema, breadcrumbSchema]
};
---

<script type="application/ld+json" set:html={JSON.stringify(fullSchema)} />