---
// src/components/Header.astro

import Navigation from "./Navigation.astro";
const navigation = [
	{ name: 'Home', href: '/' },
	{ name: 'About', href: '/about' },
	{ name: 'Services', href: '/services' },
	{ name: 'Locations', href: '/locations' },
	{ name: 'Portfolio', href: '/portfolio' },
	{ name: 'Blog', href: '/blog' },
	{ name: 'Contact', href: '/contact' },
];

// Get current path to highlight active link
const pathname = Astro.url.pathname;
---

<header class="fixed w-full z-40 bg-neutral-950/90 backdrop-blur-sm border-b border-neutral-800">
	<div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
		<div class="flex justify-between h-16 items-center">
			<!-- Logo -->
			<a href="/" class="flex items-center">
				<img
					src="/logo-white.png"
					alt="Anthony Trivisano"
					class="w-full max-w-[100px]"
				/>
			</a>

			<!-- Desktop Navigation -->
			<Navigation />

			<!-- Mobile menu button -->
			<div class="md:hidden">
				<button
					type="button"
					class="text-white hover:text-neutral-200"
					aria-label="Toggle menu"
					id="mobile-menu-toggle"
				>
					<svg
						id="menu-icon"
						class="h-6 w-6"
						fill="none"
						viewBox="0 0 24 24"
						stroke="currentColor"
					>
						<path
							stroke-linecap="round"
							stroke-linejoin="round"
							stroke-width="2"
							d="M4 6h16M4 12h16M4 18h16"
						/>
					</svg>
					<svg
						id="close-icon"
						class="h-6 w-6 hidden"
						fill="none"
						viewBox="0 0 24 24"
						stroke="currentColor"
					>
						<path
							stroke-linecap="round"
							stroke-linejoin="round"
							stroke-width="2"
							d="M6 18L18 6M6 6l12 12"
						/>
					</svg>
				</button>
			</div>
		</div>
	</div>
</header>

<!-- Mobile Menu Overlay -->
<div
	id="mobile-menu"
	class="fixed inset-0 bg-neutral-900 bg-opacity-95 z-50 flex flex-col transform translate-x-full transition-transform duration-300 ease-in-out md:hidden"
>
	<div class="flex justify-end p-6">
		<button
			type="button"
			class="text-white hover:text-neutral-200"
			aria-label="Close menu"
			id="mobile-menu-close"
		>
			<svg
				class="h-6 w-6"
				fill="none"
				viewBox="0 0 24 24"
				stroke="currentColor"
			>
				<path
					stroke-linecap="round"
					stroke-linejoin="round"
					stroke-width="2"
					d="M6 18L18 6M6 6l12 12"
				/>
			</svg>
		</button>
	</div>
	<div class="flex flex-col items-center justify-center flex-1 p-6">
		{
			navigation.map((item) => (
				<a
					href={item.href}
					class:list={[
						"text-2xl font-medium py-4 transition-colors",
						pathname === item.href || (item.href !== '/' && pathname.startsWith(item.href))
							? "text-white"
							: "text-gray-300 hover:text-white"
					]}
				>
					{item.name}
				</a>
			))
		}
	</div>
</div>

<script>
	// Wait for the DOM to be fully loaded
	function initMobileMenu() {
		const mobileMenuToggle = document.getElementById('mobile-menu-toggle');
		const mobileMenuClose = document.getElementById('mobile-menu-close');
		const mobileMenu = document.getElementById('mobile-menu');
		const menuIcon = document.getElementById('menu-icon');
		const closeIcon = document.getElementById('close-icon');

		if (!mobileMenuToggle || !mobileMenu) {
			console.error('Mobile menu elements not found');
			return;
		}

		// Function to open the mobile menu
		const openMenu = () => {
			document.body.style.overflow = 'hidden'; // Prevent scrolling
			mobileMenu.classList.remove('translate-x-full');
			mobileMenu.classList.add('translate-x-0');
			if (menuIcon && closeIcon) {
				menuIcon.classList.add('hidden');
				closeIcon.classList.remove('hidden');
			}
		};

		// Function to close the mobile menu
		const closeMenu = () => {
			document.body.style.overflow = ''; // Re-enable scrolling
			mobileMenu.classList.remove('translate-x-0');
			mobileMenu.classList.add('translate-x-full');
			if (menuIcon && closeIcon) {
				menuIcon.classList.remove('hidden');
				closeIcon.classList.add('hidden');
			}
		};

		// Toggle menu when hamburger icon is clicked
		mobileMenuToggle.addEventListener('click', openMenu);

		// Close menu when X icon is clicked
		if (mobileMenuClose) {
			mobileMenuClose.addEventListener('click', closeMenu);
		}

		// Close menu when clicking a navigation link
		const mobileNavLinks = mobileMenu.querySelectorAll('a');
		mobileNavLinks.forEach(link => {
			link.addEventListener('click', closeMenu);
		});

		// Close menu when ESC key is pressed
		document.addEventListener('keydown', (e) => {
			if (e.key === 'Escape' && !mobileMenu.classList.contains('translate-x-full')) {
				closeMenu();
			}
		});
	}

	// Initialize when the DOM is loaded
	document.addEventListener('DOMContentLoaded', initMobileMenu);

	// Support for Astro View Transitions
	document.addEventListener('astro:page-load', initMobileMenu);
</script>